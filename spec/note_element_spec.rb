# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Kitchen::NoteElement do
  let(:short_name) { :chemistry }

  let(:book_with_untitled_note) do
    book_containing(short_name: short_name, html:
      one_chapter_with_one_page_containing(
        <<~HTML
          <div data-type="note" id="noteId" class="chemistry link-to-learning">
            <p id="pId">Blah</p>
          </div>
          <div data-type="note" id="noteId" class="bad-class">
            <p id="pId">Blah</p>
          </div>
        HTML
      ))
  end

  let(:untitled_note) { book_with_untitled_note.notes.first }

  let(:unclassified_note) { book_with_untitled_note.notes[1] }

  describe '#autogenerated_title' do
    before do
      stub_locales({
        'notes': {
          'link-to-learning': 'Generic',
          'chemistry': {
            'link-to-learning': 'Chemistry'
          }
        }
      })
    end

    context 'when book has a title in locales' do
      let(:short_name) { :chemistry }

      it 'gives the book specific title' do
        expect(untitled_note.autogenerated_title).to eq 'Chemistry'
      end
    end

    context 'when book does not have a title in locales' do
      let(:short_name) { :foo }

      it 'gives the generic title' do
        expect(untitled_note.autogenerated_title).to eq 'Generic'
      end
    end

    context 'when note title does not exist' do
      it 'logs' do
        expect($stdout).to receive(:puts).with('Title for note with classes ["bad-class"] not found')
        unclassified_note.autogenerated_title
      end

      it 'returns filler' do
        allow($stdout).to receive(:puts) # suppress output
        expect(unclassified_note.autogenerated_title).to eq '[unknown note title]'
      end
    end
  end

  it 'can get its own enumerator' do
    expect(untitled_note.as_enumerator).to be_a Kitchen::NoteElementEnumerator
  end

end
