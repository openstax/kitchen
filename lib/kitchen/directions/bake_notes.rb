# frozen_string_literal: true

module Kitchen
  module Directions
    module BakeNotes
      def self.v1(book:)
        book.notes('$:not(.checkpoint)').each do |note|
          title = note.title&.cut

          note.wrap_children(class: 'os-note-body')

          if title
            if note.indicates_autogenerated_title?
              note.prepend(child:
                <<~HTML
                  <h3 class="os-title" data-type="title">
                    <span class="os-title-label">#{note.autogenerated_title}</span>
                  </h3>
                HTML
              )

              title.name = 'h4'
              title.add_class('os-subtitle')
              title.wrap_children('span', class: 'os-subtitle-label')
              note.first!('.os-note-body').prepend(child: title.raw)
            else
              title.name = 'h3'
              title.add_class('os-title')
              title.wrap_children('span', data_type: '', id: title.id, class: 'os-title-label')
              title.remove_attribute('id')
              note.prepend(child: title.raw)
            end
          else
            note.prepend(child:
              <<~HTML
                <h3 class="os-title" data-type="title">
                  <span class="os-title-label">#{note.has_class?('media-2') ? 'Media' : note.autogenerated_title}</span>
                </h3>
              HTML
            )
          end
        end
      end

      def self.bake_checkpoint_note(note:, number:)
        note.replace_children(with:
          <<~HTML
            <div class="os-note-body">#{note.children}</div>
          HTML
        )
        note.prepend(child:
          <<~HTML
            <h3 class="os-title">
              <span class="os-title-label">Checkpoint </span>
              <span class="os-number">#{number}</span>
              <span class="os-divider"> </span>
            </h3>
          HTML
        )

        exercise = note.first("[data-type='exercise']")
        solution = exercise.first("[data-type='solution']")

        return unless solution.present?

        exercise.add_class('os-hasSolution unnumbered')
        solution.replace_children(with:
          <<~HTML
            <span class="os-divider"> </span>
            <a class="os-number" href="##{exercise.id}">#{number}</a>
            <div class="os-solution-container ">#{solution.children}</div>
          HTML
        )
      end

      def self.bake_theorems(note:, number:)
        note['use-subtitle'] = true
        title = note.first('.os-title')
        title.name = 'div'
        title.remove_attribute('data-type')
        theorem_title = title.search('.os-title-label').first

        note.first!('.os-note-body').prepend(child:
          <<~HTML
            <h4 class="os-subtitle" data-type="title" id="#{theorem_title.id}">
              <span class="os-subtitle-label">#{theorem_title.text}</span>
            </h4>
          HTML
        )

        title.replace_children(with:
          <<~HTML
            <span class="os-title-label">Theorem </span>
            <span class="os-number">#{number}</span>
            <span class="os-divider"> </span>
          HTML
        )
      end
    end
  end
end
