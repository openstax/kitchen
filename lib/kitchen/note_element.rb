# frozen_string_literal: true

module Kitchen
  # An element for a note
  #
  class NoteElement < ElementBase

    # Creates a new +NoteElement+
    #
    # @param node [Nokogiri::XML::Node] the node this element wraps
    # @param document [Document] this element's document
    #
    def initialize(node:, document: nil)
      super(node: node,
            document: document,
            enumerator_class: NoteElementEnumerator,
            short_type: :note)
    end

    # Returns the note's title element
    #
    # @return [Element, nil]
    #
    def title
      block_error_if(block_given?)
      first("[data-type='title']")
    end

    # Returns true if the note's title is autogenerated
    #
    # @return [Boolean]
    #
    def indicates_autogenerated_title?
      key.present?
    end

    # Get the autogenerated title for this note
    #
    # @return [String]
    #
    def autogenerated_title
      if key.present?
        I18n.t(:"#{document.short_name}.notes.#{key}",
               default: :"notes.#{key}")
      else
        '[unknown note title]'
      end
    end

    # Returns true if this class represents the element for the given node
    #
    # @param node [Nokogiri::XML::Node] the underlying node
    # @return [Boolean]
    #
    def self.is_the_element_class_for?(node)
      node['data-type'] == 'note'
    end

    protected

    def key
      if I18n.t(document.short_name).instance_of?(String)
        puts "Entry for book with short name #{document.short_name} does not exist in locales"
        return
      end
      unless I18n.t(document.short_name).key?(:notes)
        puts "The book #{document.short_name} does not have an entry for notes in locales"
        return
      end

      possible_keys = I18n.t(document.short_name)[:notes].keys.map(&:to_s)
      keys = possible_keys & classes

      raise("too many translation keys: #{keys.join(', ')}") if keys.many?

      unless keys.first.present?
        puts "Title for note with classes #{classes} not found"
        return
      end

      keys.first
    end

  end
end
